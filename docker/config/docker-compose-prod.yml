version: '3.5'
services:
    db:
        image: postgres:14.2
        container_name: $PROJECT_NAME-prod-db
        tty: true
        restart: always
        ports:
            - '${DB_PORT}:5432'
        environment:
            POSTGRES_DB: $DB_DATABASE
            POSTGRES_USER: $DB_USER
            POSTGRES_PASSWORD: $DB_PASSWORD
        volumes:
            - ./docker/data/prod/postgres:/var/lib/postgresql/data

    redis:
        image: redis:6.2
        container_name: $PROJECT_NAME-prod-redis
        command: "redis-server --requirepass ${REDIS_PASSWORD}"
        restart: always
        ports:
            - "${REDIS_PORT}:6379"
        volumes:
            - ./docker/data/prod/redis:/var/lib/redis
        environment:
            REDIS_PASSWORD: $REDIS_PASSWORD

    backend:
        build:
            context: ../../packages/backend/
            dockerfile: Dockerfile
        container_name: $PROJECT_NAME-prod-backend
        restart: always
        env_file:
            - ../../packages/backend/.env
        volumes:
            - ../../logs/backend:/app/logs/

    http:
        build:
            context: ../../packages/frontend/
            dockerfile: Dockerfile
            args:
                NODE_ENV: "production"
        container_name: $PROJECT_NAME-prod-http
        restart: always
        ports:
            - '80:80'
        environment:
            BACKEND_UPSTREAM: "server backend:$BACKEND_PORT;"
        volumes:
            - ../../logs/http:/var/log/nginx/

    backups:
        image: peersyst/global:docker-backups-latest
        restart: always
        environment:
            PSQL_HOST: db
            PSQL_PORT: $DB_PORT
            PSQL_USER: $DB_USER
            PSQL_PASSWORD: $DB_PASSWORD
            PSQL_DATABASE: $DB_DATABASE
            INTERVAL_IN_HOURS: 24
            AWS_CLIENT_ID: $AWS_CLIENT_ID
            AWS_CLIENT_SECRET: $AWS_CLIENT_SECRET
            AWS_S3: $AWS_S3
            SLACK_WEBHOOK: $SLACK_WEBHOOK
